expression     → literal
               | unary
               | binary
               | grouping ;

literal        → NUMBER | STRING | "true" | "false" | "nil" ;
grouping       → "(" expression ")" ;
unary          → ( "-" | "!" ) expression ;
binary         → expression operator expression ;
operator       → "==" | "!=" | "<" | "<=" | ">" | ">="
               | "+"  | "-"  | "*" | "/" ;

Name       |Operators |	Associates
--------------------------------
Equality	== !=	    Left
Comparison	> >= < <=	Left
Term	    - +	        Left
Factor	    / *	        Left
Unary	    ! -	        Right
Comma       ,           Left

------------------------ RULES WITH PRECEDENCE (lowest to highest) ---------------------------

program       -> declaration* EOF ;
declaration   -> varDeclare | statement;
varDeclare    -> "var" IDENTIFIER ( "=" expression )? ";" ;
statement     -> exprStmt | printStmt ;
exprStmt      -> expression ";" ;
printStmt     -> "print" expression ";" ;
expression    -> Comma
Comma         -> ternary ( "," ternary )* ;
ternary       -> equality ( "?" expression ":" ternary)? ;
equality      -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison    -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term          -> factor ( ( "-" | "+" ) factor )* ;
factor        -> unary ( "/" | "*" ) unary | unary ;
unary         -> ( "!" | "-" ) unary | primary ;
primary       -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;